---
title: "Inverse Forward Sampling Case Studies"
author: "Maximilian Scholz"
editor: visual
execute: 
  cache: true
  autodep: true
format:
  html:
    embed-resources: true
    smooth-scroll: true
    anchor-sections: true
---

# Setup

```{r, load-libraries, warning=FALSE, message=FALSE}
library(tidyverse)
library(brms)
library(bayesim)
library(patchwork)
library(posterior)
library(purrr)
library(SBC)
library(future)
library(latex2exp)
library(progress)
library(scico)
library(bayesplot)
library(mvtnorm)
library(ggdist)

NCORES = 12 # Potentially change this to match the number of physical cores!
plan(multisession, workers = NCORES)

set.seed(671126974)
```

# Custom functions

```{r, custom-functions}
df <- read.table("bodyfat.txt", header = T, sep = ";")
pred <- c("age", "weight", "height", "neck", "chest", "abdomen", "hip", 
          "thigh", "knee", "ankle", "biceps", "forearm", "wrist")
target <- "siri"
full_precon_data <- df[,c(pred, target)]
full_precon_data <- full_precon_data %>%
  filter(siri > 1) # We remove some observations that don't make sense
full_precon_data[pred] = scale(full_precon_data[pred])
names(full_precon_data) = c('V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14', "y")

precon_ds_bodyfat <- function(N, K) {
  stopifnot(N<=250 & K <= 13)
  rows = sample(1:250, N)
  data = data.frame(y = full_precon_data$y[rows])
  data = cbind(data,
               full_precon_data[rows, c('V2', 'V3', 'V4', 'V5', 'V6', 'V7', 'V8', 'V9', 'V10', 'V11', 'V12', 'V13', 'V14')[sample(1:13, K)]])
  return(data)
}

# Simulates a preconditioning dataset
precon_ds_gamma <- function(N, K) {
  beta <- rep(0.1, K) #1
  alpha <- 1 #3
  X <- matrix(rnorm(N * K), N, K)
  eta <- alpha + X %*% beta
  mu <- exp(eta)
  shape <- 1
  scale <- mu / shape
  y <- as.vector(rgamma(N, shape = shape, scale = scale))

  return(as.data.frame(cbind(y, X)))
}

# Creates the newdata for the posterior_predict call 
ds_gen <- function(n_sbc, fit, ...) {
  variable_names <- all.vars(fit$formula$formula)
  dataset <- data.frame(matrix(rnorm(n_sbc * length(variable_names), mean = 0, sd = 1),#/length(variable_names)),
    nrow = n_sbc,
    ncol = length(variable_names)
  ))
  colnames(dataset) <- variable_names
  if ("weight_var" %in% variable_names){
    dataset$weight_var = 1
  }
  return(dataset)
}

# Weighted versions for power-scaling
weighted_bodyweight_data <- function(N, K){
  df = full_precon_data
  df$weight_var = N/nrow(full_precon_data)
  df
}
weighted_bodyweight_data <- function(N, K){
  df = full_gamma_data
  df$weight_var = N/nrow(full_precon_data)
  df
}
```

# Figure 2

```{r, very-weakly-informative-prior}
plan(multisession, workers = NCORES)
n_sims <- 200
N_PRE <- 15
N_SBC <- 50
K <- 13

# Set prior
prior <- prior(normal(0, 1), class = "b") +
         prior(normal(2, 5), class = "b", coef = "Intercept") +
         prior(gamma(0.1, 0.1), class = "shape")

# Generate preconditioning data
precon_data <- precon_ds_bodyfat(N = N_PRE, K = K)

# Fit preconditioned model M_c
prior_only_fit <- brm(bf(y ~ ., center = FALSE),
  data = precon_data,
  family = Gamma("log"),
  prior = prior,
  cores = 4,
  sample_prior = "only",
  silent = 2,
  refresh = 0
)

# Run traditional SBC with the original prior with the higher threshold
vanilla_sbc_df_t1 <- ifs_SBC(
  fit = prior_only_fit,
  n_sims = n_sims,
  ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
  lb = 1e-16, # This is the censoring threshold mentioned in the figure
  ub = Inf,
  truncate = TRUE
)

# Generate the ecdf_diff plot
p_vanilla_t1 = vanilla_sbc_df_t1$ranks_df %>%
  filter(variable %in% c("b_Intercept", "shape", "loglik")) %>%
  mutate(
    variable = case_when(
      variable == "b_Intercept" ~ "Intercept",
      variable == "loglik" ~ "Log Likelihood",
      variable == "shape" ~ "Shape"
      )) %>%
  plot_ecdf_diff(max_rank = 1000) + facet_grid(~factor(variable, levels = c("Intercept", "Shape", "Log Likelihood")))

# Run traditional SBC with the original prior with lower threshold
vanilla_sbc_df_t2 <- ifs_SBC(
  fit = prior_only_fit,
  n_sims = n_sims,
  ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
  lb = 1e-323, # This is the censoring threshold mentioned in the figure
  ub = Inf,
  truncate = TRUE
)

# Generate the ecdf_diff plot
p_vanilla_t2 = vanilla_sbc_df_t2$ranks_df %>%
  filter(variable %in% c("b_Intercept", "shape", "loglik")) %>%
  mutate(
    variable = case_when(
      variable == "b_Intercept" ~ "Intercept",
      variable == "loglik" ~ "Log Likelihood",
      variable == "shape" ~ "Shape"
      )) %>%
  plot_ecdf_diff(max_rank = 1000) + facet_grid(~factor(variable, levels = c("Intercept", "Shape", "Log Likelihood")))

# Run SBC with the implicit prior
with_precon_sbc_df <- ifs_SBC(
  fit = update(prior_only_fit,
    newdata = precon_data,
    family = Gamma("log"),
    prior = prior,
    cores = 4,
    sample_prior = "no",
    silent = 2,
    refresh = 0,
    init = 0.1
  ),
  n_sims = n_sims,
  ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
  precon_sample = precon_data,
  lb = 1e-16, # This is the censoring threshold mentioned in the figure
  ub = Inf,
  truncate = TRUE
)

# Generate the ecdf_diff plot
p_ifs = with_precon_sbc_df$ranks_df %>%
  filter(variable %in% c("b_Intercept", "shape", "loglik")) %>%
  mutate(
    variable = case_when(
      variable == "b_Intercept" ~ "Intercept",
      variable == "loglik" ~ "Log Likelihood",
      variable == "shape" ~ "Shape"
      )) %>%
  plot_ecdf_diff(max_rank = 1000) + facet_grid(~factor(variable, levels = c("Intercept", "Shape", "Log Likelihood")))

# Patchwork the plots together and make them nice
(p_vanilla_t1 +
  scale_x_continuous(breaks = c(0, 0.5, 1)) +
    theme_bw(base_size = 12) +
    labs(title = "Original Prior",
         subtitle = "Lower bound of  1e-16") +
    theme(strip.text.x = element_text(size = 8),
         axis.ticks.y = element_blank(),
         axis.text.y = element_blank(),
         axis.ticks.x = element_blank(),
         axis.text.x = element_blank(),
           plot.subtitle = element_text(size = 10),
           legend.position = "bottom")) +
  (p_vanilla_t2 +
  scale_x_continuous(breaks = c(0, 0.5, 1)) +
    theme_bw(base_size = 12) +
    labs(title = "Original Prior",
         subtitle = "Lower bound of  1e-323") +
    theme(strip.text.x = element_text(size = 8),
         axis.ticks.y = element_blank(),
         axis.text.y = element_blank(),
         axis.ticks.x = element_blank(),
         axis.text.x = element_blank(),
         plot.subtitle = element_text(size = 10),
         legend.position = "bottom")) +
  (p_ifs +
    scale_x_continuous(breaks = c(0, 0.5, 1)) +
     theme_bw(base_size = 12) +
     labs(title = "Implicit Prior",
         subtitle = "Lower bound of  1e-16") +
     theme(strip.text.x = element_text(size = 8),
           axis.ticks.y = element_blank(),
           axis.text.y = element_blank(),
           axis.ticks.x = element_blank(),
           axis.text.x = element_blank(),
           plot.subtitle = element_text(size = 10),
           legend.position = "bottom")) +
  plot_layout(guides = "collect") & theme(legend.position = "bottom")  
   

ggsave("ecdf_plots_gamma_case.pdf", width = 210, height = (297 / 4)*0.85, units = "mm", useDingbats = TRUE)
```

# Figure 3

```{r, all-scaling}
# This simulation takes a day or so. Be prepared
plan(multisession, workers = NCORES)
n_sims <- 100 # Number of SBC simulations
N_PRE_list <- c(5, 10, 14, 15, 16, 20) # Sizes of preconditioning data
N_SBC <- 50 # Size of SBC datasets
K <- 13 # Number of predictors in the model
REPLICATIONS <- 10 # How often to repeat the entire simulation
RUN_VANILLA <- TRUE # Run traditional sbc
RUN_WEIGHTED <- TRUE # Run power-scaled version
RUN_UNWEIGHTED <- TRUE # Run multiple subsetting version

# Draw one simulated dataset of the same size as the bodyfat data
full_gamma_data <- precon_ds_gamma(N = 250, K = K) 

ds_gen_list <- list(
  "gamma" = precon_ds_gamma,
  "bodyfat" = precon_ds_bodyfat,
   "full_gamma" = weighted_bodyweight_data,
   "full_bodyfat" = weighted_bodyweight_data
)

# Roughly based on https://github.com/stan-dev/stan/wiki/Prior-Choice-Recommendations
prior_list <- list(
  "weakly-informative" = prior(normal(0, 1), class = "b") +
    prior(normal(2, 1), class = "b", coef = "Intercept") +
    prior(gamma(1, 1), class = "shape"),
  "very-weakly-informative" = prior(normal(0, 1), class = "b") +
    prior(normal(2, 5), class = "b", coef = "Intercept") +
    prior(gamma(0.1, 0.1), class = "shape"),
  "vague" = prior(normal(0, 100), class = "b") +
    prior(normal(2, 100), class = "b", coef = "Intercept") +
    prior(gamma(0.01, 0.01), class = "shape"),
  "flat" = prior("", class = "b") +
    prior("", class = "b", coef = "Intercept") +
    prior("", class = "shape")
)


ifs_result_df <- tibble()
vanilla_result_df <- tibble()

pb <- progress_bar$new(
  format = "[:bar] :current/:total in :elapsedfull (eta: :eta)",
  total = length(N_PRE_list) * length(ds_gen_list) * length(prior_list) * REPLICATIONS
)
pb$tick(0)

for (r in seq_len(REPLICATIONS)) {
  for (p in seq_along(prior_list))
  {
    loop_prior <- prior_list[[p]]
    
    # Here we prepare models to use throughout the loop so we don't have to
    # recompile them all the time.
    if (RUN_WEIGHTED) {
        weighted_prior_only_fit <- brm(bf(y | weights(weight_var) ~ ., center = FALSE),
          data = weighted_bodyweight_data(50, K),
          family = Gamma("log"),
          prior = loop_prior,
          cores = 4,
          chains = 0, 
          silent = 2,
          refresh = 0,
          init = 0.1
        )
      }

      if (RUN_UNWEIGHTED | RUN_VANILLA) {
        prior_only_fit <- brm(bf(y ~ ., center = FALSE),
          data = precon_ds_gamma(50, K),
          family = Gamma("log"),
          prior = loop_prior,
          cores = 4,
          chains = 0,
          silent = 2,
          refresh = 0,
          init = 0.1
        )
      }
    
    if (names(prior_list)[[p]] != "flat" & RUN_VANILLA) {
        start_time <- Sys.time()

        vanilla_sbc_df <- ifs_SBC(
          fit = update(prior_only_fit, chains = 4, sample_prior = "only"),
          n_sims = n_sims,
          ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
          lb = 1e-16,
          ub = 1e300,
          truncate = TRUE
        )

        walltime <- as.numeric(difftime(Sys.time(), start_time, units = "s"))

        for (key_variable in unique(vanilla_sbc_df$ranks_df$variable))
        {
          vanilla_result_df <- bind_rows(
            vanilla_result_df,
            tibble(
              precon_size = 0,
              precon_likelihood = "none",
              sbc_version = "Traditional",
              variable = key_variable,
              log_gamma_score = gamma_discrepancy(
                filter(
                  vanilla_sbc_df$ranks_df,
                  variable == key_variable
                )$rank,
                post_warmup_draws = 1000,
                log = TRUE
              ),
              prior_version = names(prior_list)[[p]],
              ranks_df = list(vanilla_sbc_df$ranks_df),
              precon_data = NULL,
              walltime = walltime
            )
          )
        }
      }

    if (RUN_WEIGHTED | RUN_UNWEIGHTED) {
      
    for (i in seq_along(N_PRE_list))
    {
      N_PRE <- N_PRE_list[[i]]
      for (j in seq_along(ds_gen_list))
      {
        pb$tick()
        plan(multisession, workers = NCORES)

        weighted_loop <- startsWith(names(ds_gen_list)[[j]], "full")

        precon_data <- ds_gen_list[[j]](N = N_PRE, K = K)

        if (weighted_loop) {
          tmp_fit <- weighted_prior_only_fit
        } else {
          tmp_fit <- prior_only_fit
        }

        ifs_fit <- update(
          tmp_fit,
          newdata = precon_data,
          family = Gamma("log"),
          prior = loop_prior,
          cores = 4,
          chains = 4,
          silent = 2,
          refresh = 0,
          init = 0.1
        )

        start_time <- Sys.time()

        with_precon_sbc_df <- ifs_SBC(
          ifs_fit,
          n_sims = n_sims,
          ppred_data_gen = partial(ds_gen, n_sbc = !!N_SBC),
          precon_sample = precon_data,
          lb = 1e-16,
          ub = 1e300,
          truncate = TRUE
        )
        walltime <- as.numeric(difftime(Sys.time(), start_time, units = "s"))

        for (key_variable in unique(with_precon_sbc_df$ranks_df$variable))
        {
          ifs_result_df <- bind_rows(
            ifs_result_df,
            list(
              precon_size = N_PRE,
              precon_likelihood = names(ds_gen_list)[[j]],
              sbc_version = "IFS",
              variable = key_variable,
              log_gamma_score = gamma_discrepancy(
                filter(
                  with_precon_sbc_df$ranks_df,
                  variable == key_variable
                )$rank,
                post_warmup_draws = 1000,
                log = TRUE
              ),
              prior_version = names(prior_list)[[p]],
              ranks_df = list(with_precon_sbc_df$ranks_df),
              precon_data = list(precon_data),
              walltime = walltime
            )
          )
        }
      }
    }
    }
  }
}

saveRDS(ifs_result_df,"ifs.RDS")
saveRDS(vanilla_result_df, "vanilla.RDS")
```

## Plots

```{r, plots}
padded_vanilla_df <- vanilla_result_df %>%
  select(-c(precon_likelihood)) %>%
  expand_grid(data.frame(precon_likelihood = unique(ifs_result_df$precon_likelihood)))

padded_vanilla_df |>
  filter(precon_size < 25) |>
  mutate(
    prior_version = case_when(
      prior_version == "flat" ~ "Flat",
      prior_version == "vague" ~ "Vague",
      prior_version == "very-weakly-informative" ~ "Very weakly-informative",
      prior_version == "weakly-informative" ~ "Weakly-informative"
      ),
    precon_likelihood = case_when(
      precon_likelihood == "gamma" ~ "Simulated (MS)",
      precon_likelihood == "bodyfat" ~ "Bodyfat (MS)",
      precon_likelihood == "full_gamma" ~ "Simulated (PS)",
      precon_likelihood == "full_bodyfat" ~ "Bodyfat (PS)"
      ),
    sbc_version = case_when(
      sbc_version == "Traditional" ~ "Original",
      sbc_version == "IFS" ~ "Implicit"
      ),
    precon_size = as.factor(precon_size)
  )|>
  mutate(
    prior_version = factor(prior_version, levels = c(
    "Flat", "Vague", "Very weakly-informative", "Weakly-informative"
    )),
    precon_likelihood = factor(precon_likelihood, levels = c(
      "Bodyfat (MS)", "Bodyfat (PS)", "Simulated (MS)", "Simulated (PS)"
    ))
  )|>
  mutate(log_gamma_score = if_else(log_gamma_score <= -1000,- 1000, log_gamma_score)) |>
  filter(is.finite(log_gamma_score),
         !is.na(log_gamma_score)) |>
  ggplot(aes(x = precon_size, y = log_gamma_score)) +
  stat_pointinterval(aes(color = sbc_version),
                      .width = c(0.66, 0.90),
                     fatten_point = 1) +
  scale_size_continuous(range = c(1, 4))+
  facet_grid(precon_likelihood~prior_version) +
  theme_bw() +
  geom_hline(yintercept = log(SBC:::adjust_gamma(N = 1000, L = 1, conf_level = 0.95))) +
  scale_y_continuous(trans = "pseudo_log", breaks = c(0, -10, -100, -1000),  labels = c("0", "-10", "-100", TeX("$\\leq$-1000"))) +
  theme_bw(base_size = 12) +
  theme(strip.text.x = element_text(size = 9),
        strip.text.y = element_text(size = 9),
        axis.ticks.y = element_blank(),
        axis.text.x = element_text(size = 10),
        legend.position = "bottom") +
  xlab("Preconditioning Sample Size") +
  ylab(TeX(r"($\log(\gamma)$ score)")) +
  labs(color = "Prior") +
  scale_color_manual(values = c('#4477AA', '#EE6677'))

ggsave("gamma_case.pdf", width = 210, height = (297 / 4)*2.2, units = "mm", useDingbats = TRUE)

bind_rows(padded_vanilla_df, ifs_result_df) |>
  saveRDS(file = "results.RDS")
```

# Figure 1

```{r}
plan(multisession, workers = NCORES)
n_sims <- 200
N_SBC <- 50
K <- 13

gamma2 <- custom_family(
  name = "gamma2",
  dpars = c("mu", "sigma"),
  links = c("log", "log"),
  type = "real", lb = c(0, 0)
)
stan_gamma2 <- "
  real gamma2_lpdf(real y, real mu, real sigma) {
    return gamma_lpdf(y | mu * mu / sigma^2, mu / sigma^2);
}"
svars <- stanvar(scode = stan_gamma2, block = "functions")
posterior_epred_gamma2 <- function(draws) {
  draws$dpars$mu
}
posterior_predict_gamma2 <- function(i, prep, ...) {
  mu <- brms::get_dpar(prep, "mu", i = i)
  sigma <- brms::get_dpar(prep, "sigma", i = i)
  return(rgamma(prep$ndraws, shape = mu * mu / sigma^2, rate = mu / sigma^2))
}

posterior_epred_gamma2 <- function(prep, ...) {
  return(brms::get_dpar(prep, "mu"))
}

prior <- prior <- prior(normal(0, 0.5), class = "b") +
    prior(normal(4, 2), class = "b", coef = "Intercept") +
    prior(normal(5, 1), class = "sigma")

set.seed(100)

precon_data = precon_ds_bodyfat(N = 20, K = K)

prior_only_fit <- brm(bf(y ~ ., center = FALSE),
  data = precon_data,
  family = gamma2,
  prior = prior,
  cores = 4,
  sample_prior = "only",
  stanvars = svars
)

fit_5 = update(prior_only_fit,
    newdata = precon_data[1:5,],
    family = gamma2,
    prior = prior,
    cores = 4,
    sample_prior = "no",
    silent = 2,
    refresh = 0,
    control = list(adapt_delta = 0.999, max_treedepth = 15),
  stanvars = svars
  )

fit_10 = update(prior_only_fit,
    newdata = precon_data[1:10,],
    family = gamma2,
    prior = prior,
    cores = 4,
    sample_prior = "no",
    silent = 2,
    refresh = 0,
    control = list(adapt_delta = 0.999, max_treedepth = 15),
  stanvars = svars
  )

fit_20 = update(prior_only_fit,
    newdata = precon_data[1:20,],
    family = gamma2,
    prior = prior,
    cores = 4,
    sample_prior = "no",
    silent = 2,
    refresh = 0,
    control = list(adapt_delta = 0.999, max_treedepth = 15),
  stanvars = svars
  )

d5 = as.data.frame(as_draws_matrix(fit_5, variable = c("b_V11", "b_V14")))
d5$source = "Implicit Prior"
d5$precon_size = 5

d10 = as.data.frame(as_draws_matrix(fit_10, variable = c("b_V11", "b_V14")))
d10$source =  "Implicit Prior"
d10$precon_size = 10

d20 = as.data.frame(as_draws_matrix(fit_20, variable = c("b_V11", "b_V14")))
d20$source =  "Implicit Prior"
d20$precon_size = 20

data.grid <- expand.grid(b_V11 = seq(-2, 2, length.out=1000), b_V14 = seq(-2, 2, length.out=1000))
q2.samp = cbind(data.grid, prob = dmvnorm(data.grid, mean = c(0, 0), sigma=diag(0.5, 2)))
q2.samp$source = "Original Prior"
q2.samp$precon_size = c(rep(0, 1000000))

p1 = ggplot() +
  geom_contour(data=q2.samp,aes(x=b_V11,y=b_V14,z=prob, color = source)) +
  geom_point(data = bind_rows(d5, d10, d20), aes(x = b_V11, y = b_V14, color = source), alpha = 0.1) +
  geom_density_2d(data = bind_rows(d5, d10, d20), aes(x = b_V11, y = b_V14), color = "darkblue", contour_var = "ndensity") +
  facet_wrap(.~precon_size, nrow = 1) +
  theme_bw(base_size = 12) +
  theme(strip.text.x = element_text(size = 9),
        strip.text.y = element_text(size = 9),
        axis.ticks.y = element_blank(),
        axis.text.x = element_text(size = 10)) +
  labs(color = element_blank()) +
  xlab(TeX("$beta_{11}$")) + ylab(TeX("$beta_{14}$")) +
  scale_color_manual(values = c('#4477AA', '#EE6677')) +
  scale_x_continuous(breaks = c(-1, 0, 1)) +
  guides(colour = guide_legend(override.aes = list(alpha = 1)))


yhat_prior = tibble(
  y = full_precon_data$y,
  y_hat = colMeans(posterior_predict(prior_only_fit, newdata = full_precon_data)))
yhat_prior$precon_size = 0
yhat_5 = tibble(
  y = full_precon_data$y,
  y_hat = colMeans(posterior_predict(fit_5, newdata = full_precon_data)))
yhat_5$precon_size = 5
yhat_10 = tibble(
  y = full_precon_data$y,
  y_hat = colMeans(posterior_predict(fit_10, newdata = full_precon_data)))
yhat_10$precon_size = 10
yhat_20 = tibble(
  y = full_precon_data$y,
  y_hat = colMeans(posterior_predict(fit_20, newdata = full_precon_data)))
yhat_20$precon_size = 20

p2 = bind_rows(yhat_prior, yhat_5, yhat_10, yhat_20) %>%
ggplot(aes(x = y, y = y_hat)) +
  geom_point() +
  facet_wrap(.~precon_size, scales = "free_y", nrow = 1) +
  #scale_x_continuous(trans = "log10") +
  scale_y_continuous(trans = "log10") +
  ylab(TeX("$\\widehat{y}$")) +
  theme_bw(base_size = 12) +
  theme(axis.ticks.y = element_blank(),
        strip.text.x = element_blank())

custom_R2 <- function(fit) {
  var_e <- as.data.frame(fit, variable = "sigma")$sigma^2
  draws_ypred <- posterior_epred(fit, newdata = full_precon_data)
  var_ypred <- matrixStats::rowVars(draws_ypred)
  R2 <- as.matrix(var_ypred / (var_ypred + var_e))
  colnames(R2) <- "R2"
  R2
}

r2_prior = as_tibble(custom_R2(prior_only_fit))
r2_prior$precon_size = 0
r2_5 = as_tibble(custom_R2(fit_5))
r2_5$precon_size = 5
r2_10 = as_tibble(custom_R2(fit_10))
r2_10$precon_size = 10
r2_20 = as_tibble(custom_R2(fit_20))
r2_20$precon_size = 20

p3 = bind_rows(r2_prior, r2_5, r2_10, r2_20) %>%
  ggplot(aes(x = R2, after_stat(density))) +
  geom_histogram() +
  coord_cartesian(xlim = c(0, 1)) +
  scale_x_continuous(breaks = c(0, 0.5, 1)) +
  facet_wrap(.~precon_size, nrow = 1) +
  ylab("Density") +
  xlab(TeX("$R^2$")) +
  theme_bw(base_size = 12) +
  theme(axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        strip.text.x = element_blank())

f1 = p1 / p2 / p3

ggsave("fig_1.pdf",f1, width = 210, height = (297 / 4)*1.9, units = "mm", useDingbats = TRUE)
```

# END
